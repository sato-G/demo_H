import streamlit as st
import streamlit.components.v1 as components
import google.generativeai as genai
import os
from dotenv import load_dotenv
import json
import html

# .env„Éï„Ç°„Ç§„É´„ÇíË™≠„ÅøËæº„Åø
load_dotenv()

st.set_page_config(page_title="ÈáëËûçÂïÜÂìÅË™¨Êòé‰∫ãÈ†Ö„ÉÅ„Çß„ÉÉ„ÇØ„Ç∑„Çπ„ÉÜ„É†", layout="wide")

st.title("ÈáëËûçÂïÜÂìÅË™¨Êòé‰∫ãÈ†Ö„ÉÅ„Çß„ÉÉ„ÇØ„Ç∑„Çπ„ÉÜ„É†")

# „Çª„ÉÉ„Ç∑„Éß„É≥Áä∂ÊÖã„ÅÆÂàùÊúüÂåñ
if "source_text" not in st.session_state:
    st.session_state.source_text = ""
if "compliance_results" not in st.session_state:
    st.session_state.compliance_results = []

# Ë°®Á§∫È´ò„Åï„ÇíÂõ∫ÂÆöÂÄ§„Å´Ë®≠ÂÆö
DISPLAY_HEIGHT = 650

# API KeyË®≠ÂÆö
# Streamlit Cloud„Åß„ÅØst.secrets„Çí‰ΩøÁî®
gemini_api_key = None
if "GEMINI_API_KEY" in st.secrets:
    gemini_api_key = st.secrets["GEMINI_API_KEY"]
else:
    # „É≠„Éº„Ç´„É´Áí∞Â¢É„Åß„ÅØ.env„Éï„Ç°„Ç§„É´„Åã„ÇâË™≠„ÅøËæº„Åø
    gemini_api_key = os.getenv("GEMINI_API_KEY")

if not gemini_api_key:
    st.error("‚ùå API Key„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„ÄÇStreamlit Cloud„ÅÆÂ†¥Âêà„ÅØSecrets„Å´„ÄÅ„É≠„Éº„Ç´„É´„ÅÆÂ†¥Âêà„ÅØ.env„Éï„Ç°„Ç§„É´„Å´GEMINI_API_KEY„ÇíË®≠ÂÆö„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ")
    st.stop()


def check_compliance(text: str) -> list:
    """Ë™¨Êòé‰∫ãÈ†Ö„ÉÅ„Çß„ÉÉ„ÇØ„ÇíÂÆüË°å"""
    try:
        genai.configure(api_key=gemini_api_key)
        # NOTE: Â∞ÜÊù•ÁöÑ„Å´ gemini-2.5-pro „Å´Â§âÊõ¥‰∫àÂÆö
        model = genai.GenerativeModel("gemini-2.5-pro")

        prompt = f"""
ÈáëËûçÂïÜÂìÅ„ÅÆË™¨ÊòéÊñáÊõ∏„Åã„Çâ‰ª•‰∏ã„ÅÆ20È†ÖÁõÆ„Å´„Å§„ÅÑ„Å¶„ÉÅ„Çß„ÉÉ„ÇØ„ÇíË°å„Å£„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ

„Äê„ÉÅ„Çß„ÉÉ„ÇØÈ†ÖÁõÆ„Äë
1. ÂïÜÂìÅÂêçÁß∞„ÉªÁ®ÆÈ°û„ÅÆÊòéÁ¢∫„Å™Ë™¨Êòé
2. ÂÖÉÊú¨Ê¨†ÊêçÔºàÂÖÉÊú¨Ââ≤„ÇåÔºâ„ÅÆ„Åä„Åù„Çå„Åå„ÅÇ„ÇãÊó®„ÅÆË™¨Êòé
3. ‰æ°Ê†ºÂ§âÂãï„É™„Çπ„ÇØ„ÅÆË™¨Êòé
4. ÈáëÂà©Â§âÂãï„É™„Çπ„ÇØ„ÅÆË™¨Êòé
5. ÁÇ∫ÊõøÂ§âÂãï„É™„Çπ„ÇØ„ÅÆË™¨ÊòéÔºàË©≤ÂΩìÂïÜÂìÅ„ÅÆÂ†¥ÂêàÔºâ
6. ÊúÄÂ§ßÊêçÂ§±È°ç„ÉªÊÉ≥ÂÆöÊêçÂ§±È°ç„ÅÆË™¨Êòé
7. Ë≥ºÂÖ•ÊôÇÊâãÊï∞Êñô„ÅÆË™¨Êòé
8. ÈÅãÁî®ÁÆ°ÁêÜË≤ªÁî®Ôºà‰ø°Ë®óÂ†±ÈÖ¨Ôºâ„ÅÆË™¨Êòé
9. ÊèõÈáëÊôÇÊâãÊï∞Êñô„ÉªÂà∂Á¥Ñ„ÅÆË™¨Êòé
10. ÊäïË≥áÁµåÈ®ì„ÅÆÁ¢∫Ë™ç
11. ÊäïË≥áÁõÆÁöÑ„ÅÆÁ¢∫Ë™ç
12. „É™„Çπ„ÇØË®±ÂÆπÂ∫¶„ÅÆÁ¢∫Ë™ç
13. È°ßÂÆ¢Â±ûÊÄß„Å´ÈÅ©„Åó„ÅüÂïÜÂìÅ„Åß„ÅÇ„Çã„Åì„Å®„ÅÆÁ¢∫Ë™ç
14. ÂïÜÂìÅÂÜÖÂÆπ„ÅÆÁêÜËß£Á¢∫Ë™ç
15. „É™„Çπ„ÇØ„ÅÆÁêÜËß£Á¢∫Ë™ç
16. ÊâãÊï∞Êñô„ÅÆÁêÜËß£Á¢∫Ë™ç
17. Â•ëÁ¥ÑÁ∑†ÁµêÂâç‰∫§‰ªòÊõ∏Èù¢„ÅÆ‰∫§‰ªò
18. ÊäïË≥áÂØæË±°„ÉªÈÅãÁî®ÊñπÈáù„ÅÆË™¨Êòé
19. ÊèõÈáëÂèØËÉΩÊôÇÊúü„ÉªÂà∂Èôê„ÅÆË™¨Êòé
20. ÊúÄÁµÇÁöÑ„Å™Ë≥ºÂÖ•ÊÑèÊÄù„ÅÆÁ¢∫Ë™ç

„Äê„ÉÜ„Ç≠„Çπ„Éà„Äë
{text}

„ÄêÂá∫ÂäõÂΩ¢Âºè„Äë
‰ª•‰∏ã„ÅÆJSONÂΩ¢Âºè„ÅßÂá∫Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºö
{{
    "compliance_results": [
        {{
            "item_no": È†ÖÁõÆÁï™Âè∑,
            "item_name": "È†ÖÁõÆÂêç",
            "status": "‚óã" „Åæ„Åü„ÅØ "‚ñ≥" „Åæ„Åü„ÅØ "√ó",
            "confidence": ‰ø°È†ºÂ∫¶Ôºà0-100„ÅÆÊï¥Êï∞Ôºâ,
            "snippet": "Ë©≤ÂΩìÁÆáÊâÄ„ÅÆÊñáÁ´†ÔºàÊîπË°å„ÅØ...„ÅßÁΩÆÊèõ„Åó„Å¶1Ë°å„ÅßÂá∫ÂäõÔºâ",
            "reason": "Âà§ÂÆöÁêÜÁî±„ÅÆÁ∞°ÊΩî„Å™Ë™¨Êòé"
        }}
    ]
}}

Âà§ÂÆöÂü∫Ê∫ñÔºö
- ‚óãÔºö„Éí„Ç¢„É™„É≥„Ç∞„Åß„Åç„ÅüÔºàË≥™Âïè„Åõ„Åö„Å®„ÇÇÁõ∏Êâã„ÅåË©±„Åó„Å¶„Åè„Çå„Åü„ÄÅ„Åæ„Åü„ÅØ„ÄÅÊ≠£„Åó„ÅèË≥™Âïè„Åó„Å¶Áõ∏Êâã„ÅåÊòéÁ¢∫„Å´ÂõûÁ≠î„Åó„ÅüÔºâ
  ‰ø°È†ºÂ∫¶Ôºö100
- ‚ñ≥Ôºö„Éí„Ç¢„É™„É≥„Ç∞„Åó„Åü„ÅåÊõñÊòß„Å™ÂõûÁ≠î„ÅåËøî„Å£„Å¶„Åç„Åü„ÄÅ„Åæ„Åü„ÅØ„ÄÅÁõ∏Êâã„ÅåË≥™Âïè„Åó„Åü„Åå„Åì„Å°„Çâ„ÅåÊõñÊòß„Å™ËøîÁ≠î„Çí„Åó„Åü
  ‰ø°È†ºÂ∫¶Ôºö10-90ÔºàË™¨Êòé„ÅÆË≥™„Å´Âøú„Åò„Å¶„ÄÇËâØ„ÅÑË™¨Êòé„Å™„Çâ90„Å´Ëøë„Åè„ÄÅ‰∏çÂçÅÂàÜ„Å™„Çâ10„Å´Ëøë„ÅèÔºâ
- √óÔºöË©±„Å®„Åó„Å¶Âá∫„Å¶„Åì„Å™„Åã„Å£„Åü„ÄÅ„Åæ„Åü„ÅØ„ÄÅÁöÑÂ§ñ„Çå„Å™ÂõûÁ≠î„Çí„Åó„Åü
  ‰ø°È†ºÂ∫¶Ôºö100

JSON„ÅÆ„Åø„ÇíÂá∫Âäõ„Åó„ÄÅ‰ªñ„ÅÆË™¨Êòé„ÅØ‰∏çË¶Å„Åß„Åô„ÄÇ
"""

        response = model.generate_content(prompt)

        # JSON„Éë„Éº„Çπ
        try:
            json_text = response.text.strip()
            if json_text.startswith("```json"):
                json_text = json_text[7:]
            if json_text.endswith("```"):
                json_text = json_text[:-3]

            result = json.loads(json_text.strip())
            return result.get("compliance_results", [])
        except (json.JSONDecodeError, KeyError):
            return []

    except Exception as e:
        st.error(f"„Ç®„É©„Éº: {e}")
        return []


def create_interactive_display(text: str, results: list, height: int = 650) -> str:
    """„Ç§„É≥„Çø„É©„ÇØ„ÉÜ„Ç£„Éñ„Å™Ë°®Á§∫„ÇíÁîüÊàêÔºàst.rerun‰∏çË¶ÅÔºâ"""
    escaped_text = html.escape(text)
    results_json = json.dumps(results, ensure_ascii=False)

    html_content = f"""
    <!DOCTYPE html>
    <html>
    <head>
        <style>
            body {{
                font-family: sans-serif;
                margin: 0;
                padding: 0;
                background-color: #f5f5f5;
            }}
            .main-container {{
                max-width: 100%;
                margin: 0 auto;
            }}
            
            /* ‰∏äÊÆµ„ÅÆ„Çπ„Çø„Ç§„É´ */
            .top-section {{
                display: flex;
                gap: 20px;
                margin-bottom: 20px;
            }}
            
            /* ‰∏ãÊÆµ„ÅÆ„Çπ„Çø„Ç§„É´ */
            .bottom-section {{
                display: flex;
                gap: 20px;
            }}
            
            .left-panel {{
                flex: 1.2;
            }}
            
            .right-panel {{
                flex: 1;
            }}
            
            .section-box {{
                background: white;
                border-radius: 8px;
                padding: 20px;
                box-shadow: 0 1px 3px rgba(0,0,0,0.1);
            }}
            
            #text-container {{
                height: {height}px;
                overflow-y: auto;
                padding: 20px;
                border: 1px solid #ddd;
                border-radius: 5px;
                line-height: 1.6;
                font-size: 14px;
                background: white;
            }}
            
            .results-container {{
                height: {height}px;
                overflow-y: auto;
                padding: 10px;
            }}
            
            .result-card {{
                padding: 12px;
                border-radius: 8px;
                margin-bottom: 8px;
                border-left: 4px solid;
                position: relative;
            }}
            
            .result-card.ok {{
                background-color: #d4edda;
                border-left-color: #155724;
            }}
            
            .result-card.partial {{
                background-color: #fff3cd;
                border-left-color: #856404;
            }}
            
            .result-card.ng {{
                background-color: #f8d7da;
                border-left-color: #721c24;
            }}
            
            .result-header {{
                display: flex;
                justify-content: space-between;
                align-items: center;
                margin-bottom: 5px;
            }}
            
            .result-title {{
                margin: 0;
                font-size: 14px;
                flex: 1;
            }}
            
            .confidence-badge {{
                padding: 2px 6px;
                border-radius: 8px;
                font-size: 10px;
                color: white;
            }}
            
            .result-content {{
                display: flex;
                justify-content: space-between;
                align-items: center;
            }}
            
            .result-reason {{
                margin: 0;
                color: #666;
                font-size: 12px;
                flex: 1;
            }}
            
            .highlight-button {{
                padding: 2px 8px;
                height: 25px;
                font-size: 11px;
                background-color: #f0f2f6;
                border: 1px solid #d1d5db;
                border-radius: 4px;
                cursor: pointer;
                transition: background-color 0.2s;
            }}
            
            .highlight-button:hover {{
                background-color: #e5e7eb;
            }}
            
            .highlight {{
                background-color: #ffeb3b;
                padding: 2px 4px;
                font-weight: bold;
                border-radius: 3px;
            }}
            
            h3 {{
                margin-top: 0;
                font-size: 16px;
                color: #1f2937;
            }}
            
            .info-text {{
                color: #6b7280;
                font-size: 14px;
                margin: 10px 0;
            }}
        </style>
    </head>
    <body>
        <div class="main-container">
            <div class="bottom-section">
                <div class="left-panel">
                    <div class="section-box">
                        <h3>üìÑ ÂÖ®ÊñáË°®Á§∫</h3>
                        <div id="text-container">{escaped_text.replace(chr(10), "<br>")}</div>
                        <div class="info-text">ÊñáÂ≠óÊï∞: {len(text)}ÊñáÂ≠ó</div>
                    </div>
                </div>
                <div class="right-panel">
                    <div class="section-box">
                        <h3>üîç Ë©≥Á¥∞„ÉÅ„Çß„ÉÉ„ÇØÁµêÊûú</h3>
                        <div class="results-container" id="results-container"></div>
                    </div>
                </div>
            </div>
        </div>
        
        <script>
            const results = {results_json};
            let currentHighlight = null;
            let lastScrollPosition = 0;
            
            const textContainer = document.getElementById('text-container');
            const resultsContainer = document.getElementById('results-container');
            
            // „Çπ„ÇØ„É≠„Éº„É´‰ΩçÁΩÆ„ÇíË®òÊÜ∂
            textContainer.addEventListener('scroll', function() {{
                lastScrollPosition = textContainer.scrollTop;
            }});
            
            // Êñá„Åî„Å®„ÅÆÂå∫Âàá„ÇäÈñ¢Êï∞
            function splitIntoSentences(text) {{
                // Âè•Ë™≠ÁÇπ„ÄÅÊîπË°å„ÄÅÁúÅÁï•Ë®òÂè∑„ÅßÂå∫Âàá„Çä„ÄÅÁ©∫ÊñáÂ≠ó„ÇíÈô§Âéª
                return text.split(/[„ÄÇÔºéÔºÅÔºü\\n]|\\.\\.\\./g).filter(s => s.trim().length > 0);
            }}
            
            // „ÉÜ„Ç≠„Çπ„ÉàÊ≠£Ë¶èÂåñÈñ¢Êï∞ÔºàÁ©∫ÁôΩ„ÉªÊîπË°å„ÇíÁµ±‰∏ÄÔºâ
            function normalizeText(text) {{
                return text.replace(/\\s+/g, ' ').trim();
            }}
            
            // ÊîπÂñÑ„Åï„Çå„Åü„Éè„Ç§„É©„Ç§„ÉàÈñ¢Êï∞
            function highlightSnippet(snippet) {{
                if (!snippet) return;
                
                // ÁèæÂú®„ÅÆ„Çπ„ÇØ„É≠„Éº„É´‰ΩçÁΩÆ„Çí‰øùÂ≠ò
                const currentScroll = textContainer.scrollTop;
                
                // Âêå„Åò„Éè„Ç§„É©„Ç§„Éà„Çí„ÇØ„É™„ÉÉ„ÇØ„Åó„ÅüÂ†¥Âêà„ÅØ„ÇØ„É™„Ç¢
                if (currentHighlight === snippet) {{
                    currentHighlight = null;
                    restoreText();
                    textContainer.scrollTop = currentScroll;
                    return;
                }}
                
                // „ÉÜ„Ç≠„Çπ„Éà„ÇíÂÖÉ„Å´Êàª„Åó„Å¶„Åã„ÇâÊñ∞„Åó„ÅÑ„Éè„Ç§„É©„Ç§„Éà„ÇíÈÅ©Áî®
                restoreText();
                
                // Êñá„Åî„Å®„Å´ÂàÜÂâ≤„Åó„Å¶„Éè„Ç§„É©„Ç§„ÉàÂá¶ÁêÜ
                const sentences = splitIntoSentences(snippet);
                const textContent = textContainer.innerHTML;
                let highlightedText = textContent;
                let foundMatch = false;
                
                // ÂêÑÊñá„Å´„Å§„ÅÑ„Å¶‰∏ÄËá¥„ÇíË©¶Ë°å
                sentences.forEach((sentence, index) => {{
                    const trimmedSentence = sentence.trim();
                    // Áü≠„Åô„Åé„ÇãÊñá„ÇÑË©±ËÄÖ„É©„Éô„É´„ÅÆ„Åø„ÅÆÊñá„ÅØ„Çπ„Ç≠„ÉÉ„Éó
                    if (trimmedSentence.length < 3 || /^(È°ßÂÆ¢|Â∫óÂì°)[Ôºö:]?$/.test(trimmedSentence)) return;
                    
                    // „Çπ„Éî„Éº„Ç´„Éº„É©„Éô„É´„Å®Ë®òÂè∑„ÇíÈô§Âéª„Åó„Å¶Ê§úÁ¥¢Áî®ÊñáÁ´†„Çí‰ΩúÊàê
                    const cleanedSentence = trimmedSentence
                        .replace(/^(È°ßÂÆ¢|Â∫óÂì°)[Ôºö:]\\s*/, '')    // Ë©±ËÄÖ„É©„Éô„É´„ÇíÈô§Âéª
                        .replace(/^[\\s\\.\\-‚Ä¶]+/, '')         // ÂÖàÈ†≠Ë®òÂè∑„ÇíÈô§Âéª
                        .replace(/[„ÄÇÔºéÔºÅÔºü]+$/, '')          // Êú´Â∞æÂè•Ë™≠ÁÇπ„ÇíÈô§Âéª
                        .trim();
                    const searchSentence = cleanedSentence || trimmedSentence;
                    
                    // Ê≠£Ë¶èÂåñ„Åó„Å¶„Éû„ÉÉ„ÉÅ„É≥„Ç∞
                    const normalizedSentence = normalizeText(searchSentence);
                    const escapedSentence = normalizedSentence.replace(/[.*+?^${{}}()|[\\]\\\\]/g, '\\\\$&');
                    
                    // Ë§áÊï∞„ÅÆ„Éû„ÉÉ„ÉÅ„É≥„Ç∞„Éë„Çø„Éº„É≥„ÇíË©¶Ë°å
                    const patterns = [
                        // ÂÆåÂÖ®‰∏ÄËá¥
                        new RegExp(escapedSentence, 'gi'),
                        // ÂâçÂæå„ÅÆÁ©∫ÁôΩ„ÇíËÄÉÊÖÆ
                        new RegExp(`\\\\s*${{escapedSentence}}\\\\s*`, 'gi'),
                        // HTML„Çø„Ç∞Èñì„ÅÆÊîπË°å„ÇíËÄÉÊÖÆ
                        new RegExp(escapedSentence.replace(/\\s+/g, '[\\\\s<br>]*'), 'gi')
                    ];
                    
                    for (let pattern of patterns) {{
                        if (pattern.test(highlightedText)) {{
                            const highlightId = index === 0 ? 'highlight-target' : `highlight-${{index}}`;
                            highlightedText = highlightedText.replace(pattern, (match) => {{
                                foundMatch = true;
                                return `<span class="highlight" id="${{highlightId}}">${{match}}</span>`;
                            }});
                            break;
                        }}
                    }}
                }});
                
                // „Éè„Ç§„É©„Ç§„Éà„ÅåÈÅ©Áî®„Åï„Çå„ÅüÂ†¥Âêà„ÅÆ„Åø„ÉÜ„Ç≠„Çπ„Éà„ÇíÊõ¥Êñ∞
                if (foundMatch) {{
                    textContainer.innerHTML = highlightedText;
                    
                    // ÊúÄÂàù„ÅÆ„Éè„Ç§„É©„Ç§„ÉàË¶ÅÁ¥†„Å∏„Çπ„ÇØ„É≠„Éº„É´
                    setTimeout(() => {{
                        const highlightElement = document.getElementById('highlight-target');
                        if (highlightElement) {{
                            const elementTop = highlightElement.offsetTop;
                            const containerHeight = textContainer.clientHeight;
                            const targetScrollTop = elementTop - (containerHeight / 2) + (highlightElement.clientHeight / 2);
                            
                            textContainer.scrollTo({{
                                top: Math.max(0, targetScrollTop),
                                behavior: 'smooth'
                            }});
                        }}
                    }}, 50);
                    
                    currentHighlight = snippet;
                }} else {{
                    // „Éû„ÉÉ„ÉÅ„Åó„Å™„ÅÑÂ†¥Âêà„ÅØÂæìÊù•„ÅÆÊñπÊ≥ï„ÇíË©¶Ë°å
                    const escapedSnippet = snippet.replace(/[.*+?^${{}}()|[\\]\\\\]/g, '\\\\$&');
                    const fallbackPattern = new RegExp(escapedSnippet.replace(/\\s+/g, '[\\\\s<br>]*'), 'gi');
                    if (fallbackPattern.test(textContent)) {{
                        highlightedText = textContent.replace(fallbackPattern, 
                            `<span class="highlight" id="highlight-target">${{snippet}}</span>`);
                        textContainer.innerHTML = highlightedText;
                        currentHighlight = snippet;
                    }}
                }}
            }}
            
            // „ÉÜ„Ç≠„Çπ„Éà„ÇíÂÖÉ„Å´Êàª„Åô
            function restoreText() {{
                textContainer.innerHTML = `{escaped_text.replace(chr(10), "<br>")}`;
            }}
            
            // ÁµêÊûú„Ç´„Éº„Éâ„Çí‰ΩúÊàê
            function createResultCards() {{
                results.forEach((result, index) => {{
                    const statusClass = result.status === '‚óã' ? 'ok' : 
                                      result.status === '‚ñ≥' ? 'partial' : 'ng';
                    const statusIcon = result.status === '‚óã' ? '‚úÖ' : 
                                     result.status === '‚ñ≥' ? '‚ö†Ô∏è' : '‚ùå';
                    const statusColor = result.status === '‚óã' ? '#155724' : 
                                      result.status === '‚ñ≥' ? '#856404' : '#721c24';
                    
                    const card = document.createElement('div');
                    card.className = `result-card ${{statusClass}}`;
                    
                    card.innerHTML = `
                        <div class="result-header">
                            <h6 class="result-title" style="color: ${{statusColor}}">
                                ${{statusIcon}} ${{result.item_no}}. ${{result.item_name}}
                            </h6>
                            <span class="confidence-badge" style="background-color: ${{statusColor}}">
                                ‰ø°È†ºÂ∫¶: ${{result.confidence}}%
                            </span>
                        </div>
                        <div class="result-content">
                            <p class="result-reason">${{result.reason}}</p>
                            ${{result.snippet ? 
                                `<button class="highlight-button" onclick="highlightSnippet('${{result.snippet.replace(/'/g, "\\\\'")}}')">
                                    üìç Ë©≤ÂΩìÁÆáÊâÄ
                                </button>` : ''
                            }}
                        </div>
                    `;
                    
                    resultsContainer.appendChild(card);
                }});
            }}
            
            // ÂàùÊúüÂåñ
            createResultCards();
        </script>
    </body>
    </html>
    """

    return html_content


# ===== ‰∏äÊÆµ: „Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÔºàÂ∑¶Ôºâ+ „Çµ„Éû„É™„ÉºÔºàÂè≥Ôºâ =====
st.subheader("üì§ ÂÖ•Âäõ„ÉªÂàÜÊûêÂÆüË°å")
top_col1, top_col2 = st.columns([1.2, 1])

# ‰∏äÊÆµÂ∑¶: „Éï„Ç°„Ç§„É´„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Çª„ÇØ„Ç∑„Éß„É≥
with top_col1:
    st.markdown("**üìÑ „Éï„Ç°„Ç§„É´„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ**")

    # „Éï„Ç°„Ç§„É´„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ
    uploaded_file = st.file_uploader(
        "„ÉÜ„Ç≠„Çπ„Éà„Éï„Ç°„Ç§„É´„Çí„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ",
        type=["txt"],
        help="ÈáëËûçÂïÜÂìÅ„ÅÆË™¨ÊòéÊñá„ÅåË®òËºâ„Åï„Çå„Åü„ÉÜ„Ç≠„Çπ„Éà„Éï„Ç°„Ç§„É´„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ",
    )

    if uploaded_file is not None:
        # „Éï„Ç°„Ç§„É´ÂÜÖÂÆπ„ÇíË™≠„ÅøËæº„Åø
        file_content = str(uploaded_file.read(), "utf-8")
        st.session_state.source_text = file_content
        st.success(f"‚úÖ „Éï„Ç°„Ç§„É´„Äå{uploaded_file.name}„Äç„ÇíË™≠„ÅøËæº„Åø„Åæ„Åó„Åü")

    # Áõ¥Êé•ÂÖ•Âäõ„Çª„ÇØ„Ç∑„Éß„É≥ÔºàÊäò„Çä„Åü„Åü„ÅøÔºâ
    with st.expander("üìù Áõ¥Êé•ÂÖ•Âäõ„Åô„ÇãÂ†¥Âêà„ÅØ„Åì„Å°„Çâ"):
        input_text = st.text_area(
            "„ÉÜ„Ç≠„Çπ„Éà„ÇíÂÖ•Âäõ",
            height=120,
            placeholder="„Éï„Ç°„Ç§„É´„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„ÅÆ‰ª£„Çè„Çä„Å´„ÄÅ„Åì„Åì„Å´Áõ¥Êé•ÂÖ•Âäõ„Åô„Çã„Åì„Å®„ÇÇ„Åß„Åç„Åæ„Åô...",
        )

        if st.button("„ÉÜ„Ç≠„Çπ„Éà„ÇíË®≠ÂÆö"):
            if input_text:
                st.session_state.source_text = input_text
                st.success("‚úÖ „ÉÜ„Ç≠„Çπ„Éà„ÇíË®≠ÂÆö„Åó„Åæ„Åó„Åü")

# ‰∏äÊÆµÂè≥: ÂàÜÊûêÂÆüË°å + „Çµ„Éû„É™„Éº
with top_col2:
    st.markdown("**üîç ÂàÜÊûêÂÆüË°å„ÉªÁµêÊûú„Çµ„Éû„É™„Éº**")

    if st.session_state.source_text:
        # ÂàÜÊûêÂÆüË°å„Éú„Çø„É≥
        if st.button("üîç ÂàÜÊûêÂÆüË°å", type="primary", use_container_width=True):
            with st.spinner("AIÂàÜÊûê‰∏≠..."):
                results = check_compliance(st.session_state.source_text)
                if results:
                    st.session_state.compliance_results = results
                    # ÁµêÊûú„Çµ„Éû„É™„Éº
                    ok_count = len([r for r in results if r["status"] == "‚óã"])
                    partial_count = len([r for r in results if r["status"] == "‚ñ≥"])
                    ng_count = len([r for r in results if r["status"] == "√ó"])
                    st.success(
                        f"‚úÖ „ÉÅ„Çß„ÉÉ„ÇØÂÆå‰∫Ü: ‚óã{ok_count}‰ª∂ ‚ñ≥{partial_count}‰ª∂ √ó{ng_count}‰ª∂"
                    )
                else:
                    st.warning("ÂàÜÊûêÁµêÊûú„ÇíÂèñÂæó„Åß„Åç„Åæ„Åõ„Çì„Åß„Åó„Åü")

        # „Çµ„Éû„É™„ÉºË°®Á§∫
        if st.session_state.compliance_results:
            st.markdown("**üìä ÁµêÊûú„Çµ„Éû„É™„Éº**")

            # ÁµêÊûú„Çí„Ç´„Ç¶„É≥„Éà
            ok_items = [
                r for r in st.session_state.compliance_results if r["status"] == "‚óã"
            ]
            partial_items = [
                r for r in st.session_state.compliance_results if r["status"] == "‚ñ≥"
            ]
            ng_items = [
                r for r in st.session_state.compliance_results if r["status"] == "√ó"
            ]

            # „Çµ„Éû„É™„ÉºË°®Á§∫Ôºà3Âàó„É¨„Ç§„Ç¢„Ç¶„ÉàÔºâ
            col_ok, col_partial, col_ng = st.columns(3)
            with col_ok:
                st.metric(
                    "‚úÖ ÈÅ©Âêà",
                    f"{len(ok_items)}‰ª∂",
                    f"{len(ok_items) / len(st.session_state.compliance_results) * 100:.1f}%",
                )
            with col_partial:
                st.metric(
                    "‚ö†Ô∏è ÈÉ®ÂàÜÈÅ©Âêà",
                    f"{len(partial_items)}‰ª∂",
                    f"{len(partial_items) / len(st.session_state.compliance_results) * 100:.1f}%",
                )
            with col_ng:
                st.metric(
                    "‚ùå ‰∏çÈÅ©Âêà",
                    f"{len(ng_items)}‰ª∂",
                    f"{len(ng_items) / len(st.session_state.compliance_results) * 100:.1f}%",
                )
    else:
        st.info("„Éï„Ç°„Ç§„É´„Çí„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Åó„Å¶ÈñãÂßã„Åó„Å¶„Åè„Å†„Åï„ÅÑ")

# Âå∫Âàá„ÇäÁ∑ö
st.markdown("---")

# ===== ‰∏ãÊÆµ: „Ç§„É≥„Çø„É©„ÇØ„ÉÜ„Ç£„ÉñË°®Á§∫ =====
st.subheader("üìã Ë©≥Á¥∞Ë°®Á§∫")

if st.session_state.source_text and st.session_state.compliance_results:
    # „Ç§„É≥„Çø„É©„ÇØ„ÉÜ„Ç£„Éñ„Å™Ë°®Á§∫„ÇíÁîüÊàê
    html_content = create_interactive_display(
        st.session_state.source_text,
        st.session_state.compliance_results,
        DISPLAY_HEIGHT,
    )
    components.html(html_content, height=DISPLAY_HEIGHT + 100)
elif st.session_state.source_text:
    # ÁµêÊûú„Åå„Å™„ÅÑÂ†¥Âêà„ÅØ„ÉÜ„Ç≠„Çπ„Éà„ÅÆ„ÅøË°®Á§∫
    col1, col2 = st.columns([1.2, 1])
    with col1:
        st.markdown("**üìÑ ÂÖ®ÊñáË°®Á§∫**")
        st.text_area(
            "ÂÖ®Êñá",
            st.session_state.source_text,
            height=DISPLAY_HEIGHT,
            disabled=True,
            label_visibility="collapsed",
        )
    with col2:
        st.info(
            "ÂàÜÊûêÁµêÊûú„Åå„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ‰∏äË®ò„ÅÆ„ÄåÂàÜÊûêÂÆüË°å„Äç„Éú„Çø„É≥„Çí„ÇØ„É™„ÉÉ„ÇØ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ"
        )
else:
    st.info("„ÉÜ„Ç≠„Çπ„Éà„ÅåÂÖ•Âäõ„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì")

# „Éï„ÉÉ„Çø„Éº
st.markdown("---")
st.caption(
    "üí° Ë©≤ÂΩìÁÆáÊâÄ„Éú„Çø„É≥„Çí„ÇØ„É™„ÉÉ„ÇØ„Åô„Çã„Å®„ÄÅÂ∑¶ÂÅ¥„ÅÆÂÖ®Êñá„ÅßÁèæÂú®Ë¶ã„Å¶„ÅÑ„Çã‰ΩçÁΩÆ„Åã„Çâ„Åù„ÅÆÁÆáÊâÄ„Åæ„ÅßÊªë„Çâ„Åã„Å´„Çπ„ÇØ„É≠„Éº„É´„Åó„ÄÅÈªÑËâ≤„Åè„Éè„Ç§„É©„Ç§„ÉàË°®Á§∫„Åï„Çå„Åæ„Åô„ÄÇ"
)
